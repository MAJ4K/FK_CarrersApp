import os
import time
import boto3
import base64
from time import time, gmtime, strftime
from requests_toolbelt.multipart import decoder
from opensearchpy import OpenSearch, RequestsHttpConnection, AWSV4SignerAuth

# cluster endpoint, for example: my-test-domain.us-east-1.es.amazonaws.com
host = os.environ['ENDPOINT']
region = os.environ['AWS_DEFAULT_REGION']
service = 'es'
credentials = boto3.Session().get_credentials()
auth = AWSV4SignerAuth(credentials, region, service)

opensearch_client = OpenSearch(
	hosts = [{'host': host, 'port': 443}],
	http_auth = auth,
	use_ssl = True,
	verify_certs = True,
	connection_class = RequestsHttpConnection,
	pool_maxsize = 20
)

def lambda_handler(event, context):
	# Get data sent from applicant
	content_type_header = event['headers']['content-type']
	postdata = base64.b64decode(event['body']).decode('iso-8859-1')
	
	# Format data into dictionary Data
	jObject = { 'EXT': {} }
	for part in decoder.MultipartDecoder(postdata.encode('UTF-8'), content_type_header).parts:
		header_content = {}
		temp = part.headers[b'Content-Disposition'].decode('UTF-8').split('; ')
		if temp[0] == 'form-data': del temp[0]
		for x in temp: header_content[x.split('=')[0]] = x.split('=')[-1].replace("\"", "")
		# convert header and text into dictionaryable data
		dict_item = {header_content['name']:part.text}
		meta_item = {header_content.pop('name',None):header_content}
		# put dictionariable data into 'jObject'
		jObject.update(dict_item)
		if header_content: jObject['EXT'].update(meta_item)
		
	for x in jObject['EXT']:
		# Get the file extention for resume
		ext = jObject['EXT'][x].get('fileExtention',None)
		# Parse through possible resume <jObject[x]>
			# PDF / Doc / Docx / Whatever Library allows
		match ext:
			case '.pdf': print(jObject[x])
			case '.doc': print(jObject[x])
			case '.docx': print(jObject[x])
			case _: continue
	
	jObject['EXT']['time'] = strftime("%a, %d %b %Y %H:%M:%S", gmtime(time()))
	
	# Put data into open search
	response = opensearch_client.index(
		index = 'carrers-test-index',
		body = jObject,
		id = os.environ['_X_AMZN_TRACE_ID'],
		refresh = True
	)
		
	return {
		'statusCode': 200,
		'body': {
			'resp': response
		}
	}